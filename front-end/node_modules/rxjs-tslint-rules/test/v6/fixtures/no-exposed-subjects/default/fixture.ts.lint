import * as Rx from 'rxjs';

const variable = new Rx.Subject<void>();

class Mock {

  // valid properties
  private _submitSubject$ = new Rx.Subject<void>();
  private readonly rSubmitSubject$ = new Rx.Subject<void>();
  private _age: number;

  // invalid properties
  public property$ = new Rx.Subject<void>();
         ~~~~~~~~~                                              [no-exposed % ("property$")]

  protected property2$ = new Rx.Subject<void>();
            ~~~~~~~~~~                                          [no-exposed % ("property2$")]

  qualitySubject$ = new Rx.Subject<any>();
  ~~~~~~~~~~~~~~~                                               [no-exposed % ("qualitySubject$")]

  public readonly rPropertySubject$ = new Rx.Subject<void>();
                  ~~~~~~~~~~~~~~~~~                             [no-exposed % ("rPropertySubject$")]

  readonly rSubject$ = new Rx.Subject<void>();
           ~~~~~~~~~                                            [no-exposed % ("rSubject$")]

  constructor(
    public streamSubject$: Rx.Subject<any>,
           ~~~~~~~~~~~~~~                                       [no-exposed % ("streamSubject$")]
    protected pSubject$: Rx.Subject<any>,
              ~~~~~~~~~                                         [no-exposed % ("pSubject$")]
    private secondParamSubject$: Rx.Subject<any>,
    anySubject$: Rx.Subject<any>,
    ~~~~~~~~~~~                                                 [no-exposed % ("anySubject$")]
    observable: Rx.Observable<any>,
  ) {

    console.log(this.submitSubject$);
    console.log(this.property$);
    console.log(this.propertySubject$);
  }

  get submitSubject$(): Rx.Subject<any> {
      ~~~~~~~~~~~~~~                                            [no-exposed % ("submitSubject$")]
    return this._submitSubject$;
  }

  set submitSubject$(set$: Rx.Subject<any>) {
      ~~~~~~~~~~~~~~                                            [no-exposed % ("submitSubject$")]
    this._submitSubject$ = set$;
  }

  get age(): number {
    return this.age;
  }

  set age(newNum: number) {
    this._age = newNum;
  }

  public invalidMethod(): Rx.Subject<any> {
         ~~~~~~~~~~~~~                                          [no-exposed % ("invalidMethod")]
    return new Rx.Subject<any>();
  }

  invalidMethod2(): Rx.Subject<any> {
  ~~~~~~~~~~~~~~                                                [no-exposed % ("invalidMethod2")]
    return new Rx.Subject<any>();
  }

  private validMethod(): Rx.Subject<any> {
    return new Rx.Subject<any>();
  }

}

function foo(xSubject$: Rx.Subject<any>): Rx.Subject<any> {
  return xSubject$;
}

[no-exposed]: Subject '%s' must be private.
