"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Lint = require("tslint");
var ts = require("typescript");
var util_1 = require("../support/util");
var defaultAllowedTypesRegExp = /^EventEmitter$/;
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.applyWithProgram = function (sourceFile, program) {
        return this.applyWithWalker(new RxjsNoExposedSubjects(sourceFile, this.getOptions(), program));
    };
    Rule.metadata = {
        description: "Disallows exposed subjects.",
        options: null,
        optionsDescription: "Not configurable.",
        requiresTypeInfo: true,
        ruleName: "rxjs-no-exposed-subjects",
        type: "functionality",
        typescriptOnly: true
    };
    return Rule;
}(Lint.Rules.TypedRule));
exports.Rule = Rule;
var RxjsNoExposedSubjects = (function (_super) {
    tslib_1.__extends(RxjsNoExposedSubjects, _super);
    function RxjsNoExposedSubjects(sourceFile, rawOptions, program) {
        return _super.call(this, sourceFile, rawOptions, program) || this;
    }
    RxjsNoExposedSubjects.prototype.visitConstructorDeclaration = function (node) {
        var _this = this;
        node.parameters.forEach(function (param) { return _this.validateNode(param); });
        _super.prototype.visitConstructorDeclaration.call(this, node);
    };
    RxjsNoExposedSubjects.prototype.visitPropertyDeclaration = function (node) {
        this.validateNode(node);
        _super.prototype.visitPropertyDeclaration.call(this, node);
    };
    RxjsNoExposedSubjects.prototype.visitMethodDeclaration = function (node) {
        this.validateNode(node, node.type);
        _super.prototype.visitMethodDeclaration.call(this, node);
    };
    RxjsNoExposedSubjects.prototype.visitMethodSignature = function (node) {
        this.validateNode(node, node.type);
        _super.prototype.visitMethodSignature.call(this, node);
    };
    RxjsNoExposedSubjects.prototype.visitGetAccessor = function (node) {
        this.validateNode(node);
        _super.prototype.visitGetAccessor.call(this, node);
    };
    RxjsNoExposedSubjects.prototype.visitSetAccessor = function (node) {
        this.validateNode(node);
        _super.prototype.visitSetAccessor.call(this, node);
    };
    RxjsNoExposedSubjects.prototype.validateNode = function (node, typeNode) {
        var name = node.name;
        if (name) {
            var text = name.getText();
            var privateModifier = node.modifiers
                ? node.modifiers.find(function (modifier) { return modifier.kind === ts.SyntaxKind.PrivateKeyword; })
                : null;
            var type = this.getTypeChecker().getTypeAtLocation(typeNode || node);
            if (!privateModifier && util_1.couldBeType(type, "Subject") && !util_1.couldBeType(type, defaultAllowedTypesRegExp)) {
                this.addFailureAtNode(name, "Subject '" + text + "' must be private.");
            }
        }
    };
    return RxjsNoExposedSubjects;
}(Lint.ProgramAwareRuleWalker));
